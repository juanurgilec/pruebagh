# .github/workflows/docker-build.yml
name: CI/CD Pipeline

on:
  push:
    braches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
      # Instalar dependencias del proyecto (para Python o Node.js)
      - name: Install dependencies
        run: |         
            pip install -r requirements.txt
      # Ejecutar pruebas de análisis estático (por ejemplo, ESLint o Pylint)
      - name: Static Code Analysis
        run: |
            pylint app.py
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
     # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
      # Configurar K3s en GitHub Actions
      - name: Setup K3s
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'latest'

      # Aplicar el archivo de despliegue en Kubernetes (Minikube)
      - name: Deploy to k3s
        run: |
          kubectl apply -f ./deployment.yaml
          kubectl rollout status deployment/python-flask-app
         # sleep 30s
         # kubectl get deployment
         # kubectl describe deployment python-flask-app
         # kubectl describe pod --selector=app=python-flask-appS
      # Verificar que el despliegue es exitoso
      - name: Test the Deployment
        run: |
          kubectl get pods
          kubectl get svc python-flask-service
      # Acceder al servicio en Minikube
      - name: Access Service
        run: |
          nohup kubectl port-forward service/python-flask-service 5000:5000  > port-forward.log 2>&1 &
          sleep 3s
          RESPONSE=$(curl -s http://localhost:5000)
          # Mostrar el resultado HTML
          echo "Respuesta del servicio (HTML):"
          echo "$RESPONSE"